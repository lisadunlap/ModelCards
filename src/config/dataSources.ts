/**
 * Data Sources Configuration
 * 
 * Centralized configuration for all data sources used in the Model Difference Analyzer.
 * Update these paths to point to your data files.
 */

export const DATA_SOURCES = {
  // Main CSV files for model properties
  PROPERTIES_CSV: './all_one_sided_comparisons_clustered_4_stripped.csv',
  PROPERTIES_COMPRESSED: './all_one_sided_comparisons_clustered_4_stripped.csv.gz',
  
  // Optimized data files (generated by optimize-data.py script)
  TABLE_DATA_CSV: './optimized_data/table_data.csv',
  TABLE_DATA_COMPRESSED: './optimized_data/table_data.csv.gz',
  TABLE_DATA_PARQUET: './optimized_data/table_data.parquet',
  DETAIL_DATA_CSV: './optimized_data/detail_data.csv',
  DETAIL_DATA_COMPRESSED: './optimized_data/detail_data.csv.gz',
  DETAIL_DATA_PARQUET: './optimized_data/detail_data.parquet',
  DATA_INDEX: './optimized_data/data_index.json',
  
  // Embedding data
  EMBEDDINGS_CSV: './embedding_sample.csv',
  EMBEDDINGS_PARQUET: './all_one_sided_comparisons_clustered_with_embeddings-clean.parquet',
  
  // Backup or test data sources
  SAMPLE_DIFFERENCES_CSV: './sample_differences.csv',
  SAMPLE_PROPERTIES_CSV: './sample_properties.csv',
} as const;

/**
 * Data Loading Configuration
 */
export const DATA_CONFIG = {
  // Performance settings
  MAX_PREVIEW_ROWS: null, // Remove limit to see all models
  ENABLE_DYNAMIC_TYPING: true,
  SKIP_EMPTY_LINES: true,
  
  // Optimization settings - Use optimized uncompressed files
  USE_OPTIMIZED_DATA: true, // Use optimized split (24MB table + 64MB detail as needed)
  USE_COMPRESSED_DATA: false, // Use uncompressed optimized files to avoid browser issues
  USE_PARQUET: false, // Toggle between Parquet and CSV
  LAZY_LOAD_DETAILS: true, // Load detail data only when needed
  
  // Parquet-specific settings
  PARQUET_BATCH_SIZE: 1000, // Process Parquet in batches for memory efficiency
  
  // Pagination settings
  ENABLE_PAGINATION: false, // Enable pagination for very large datasets
  PAGE_SIZE: 1000, // Rows per page
  INITIAL_LOAD_SIZE: 5000, // Initial rows to load
  
  // Caching settings
  ENABLE_BROWSER_CACHE: true, // Use browser cache for processed data
  CACHE_DURATION: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
  
  // Error handling
  MAX_PARSE_ERRORS: 100, // Maximum parse errors to tolerate
  
  // Memory management
  CHUNK_SIZE: 1000, // For processing large datasets in chunks (if needed)
  MAX_MEMORY_USAGE: 100 * 1024 * 1024, // 100MB max memory usage
} as const;

/**
 * Helper function to get the current data sources based on configuration
 */
export const getCurrentDataSources = () => {
  const config = DATA_CONFIG;
  
  // Determine which format to use
  let tableDataSource: string;
  let detailDataSource: string;
  
  if (config.USE_OPTIMIZED_DATA) {
    if (config.USE_PARQUET) {
      tableDataSource = DATA_SOURCES.TABLE_DATA_PARQUET;
      detailDataSource = DATA_SOURCES.DETAIL_DATA_PARQUET;
    } else if (config.USE_COMPRESSED_DATA) {
      tableDataSource = DATA_SOURCES.TABLE_DATA_COMPRESSED;
      detailDataSource = DATA_SOURCES.DETAIL_DATA_COMPRESSED;
    } else {
      tableDataSource = DATA_SOURCES.TABLE_DATA_CSV;
      detailDataSource = DATA_SOURCES.DETAIL_DATA_CSV;
    }
  } else {
    // Use full dataset - compressed or uncompressed
    if (config.USE_COMPRESSED_DATA) {
      tableDataSource = DATA_SOURCES.PROPERTIES_COMPRESSED;
      detailDataSource = DATA_SOURCES.PROPERTIES_COMPRESSED;
    } else {
      tableDataSource = DATA_SOURCES.PROPERTIES_CSV;
      detailDataSource = DATA_SOURCES.PROPERTIES_CSV;
    }
  }
  
  return {
    properties: tableDataSource,
    tableData: tableDataSource,
    detailData: detailDataSource,
    dataIndex: DATA_SOURCES.DATA_INDEX,
    embeddings: config.USE_PARQUET ? DATA_SOURCES.EMBEDDINGS_PARQUET : DATA_SOURCES.EMBEDDINGS_CSV,
  };
};

/**
 * Helper function to validate if all required files are configured
 */
export const validateDataSources = () => {
  const sources = getCurrentDataSources();
  const missing = [];
  
  if (!sources.properties) missing.push('properties CSV');
  if (!sources.embeddings) missing.push('embeddings data');
  
  if (missing.length > 0) {
    throw new Error(`Missing data sources: ${missing.join(', ')}`);
  }
  
  return true;
};

/**
 * Helper function to check if optimized data is available
 */
export const isOptimizedDataAvailable = async (): Promise<boolean> => {
  try {
    const sources = getCurrentDataSources();
    const response = await fetch(sources.tableData, { method: 'HEAD' });
    return response.ok;
  } catch {
    return false;
  }
};

/**
 * Helper function to get data loading strategy
 */
export const getLoadingStrategy = () => {
  return {
    useOptimizedData: DATA_CONFIG.USE_OPTIMIZED_DATA,
    useCompression: DATA_CONFIG.USE_COMPRESSED_DATA,
    useParquet: DATA_CONFIG.USE_PARQUET,
    lazyLoadDetails: DATA_CONFIG.LAZY_LOAD_DETAILS,
    enablePagination: DATA_CONFIG.ENABLE_PAGINATION,
    enableBrowserCache: DATA_CONFIG.ENABLE_BROWSER_CACHE,
    pageSize: DATA_CONFIG.PAGE_SIZE,
    initialLoadSize: DATA_CONFIG.INITIAL_LOAD_SIZE,
  };
}; 